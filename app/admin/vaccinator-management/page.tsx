"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { ChevronLeft, Search, Plus, Upload, X } from "lucide-react"
import Link from "next/link"
import { Label } from "@/components/ui/label"
import { useToast } from "@/components/ui/use-toast"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from "@/components/ui/form"
import { FormSection } from "@/components/forms/FormSection"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Skeleton } from "@/components/ui/skeleton"
import { Badge } from "@/components/ui/badge"

// Define the vaccinator form schema with Zod
const vaccinatorFormSchema = z
  .object({
    // Basic information
    vaccinator_id: z.string().uuid().optional(), // Primary key, auto-generated by Supabase
    firstName: z.string().min(1, "First name is required"),
    lastName: z.string().min(1, "Last name is required"),
    email: z.string().email("Please enter a valid email address").toLowerCase(),
    phone: z
      .string()
      .min(10, "Phone number must be at least 10 digits")
      .regex(/^\+?[0-9\s\-()]+$/, "Invalid phone number format"),

    // Professional details
    departmentId: z.string().min(1, "Please select a valid department"), // Foreign key to departments table
    professionalId: z.string().min(1, "Professional ID/License is required"),

    // System fields - using lowercase values to match the database constraint
    status: z.enum(["active", "inactive", "suspended"]).default("active"),

    // Authentication (handled separately in auth tables)
    password: z
      .string()
      .min(8, "Password must be at least 8 characters")
      .regex(/[A-Z]/, "Password must contain at least one uppercase letter")
      .regex(/[0-9]/, "Password must contain at least one number")
      .regex(/[^A-Za-z0-9]/, "Password must contain at least one special character"),
    confirmPassword: z.string().min(1, "Please confirm your password"),

    // Simplified availability fields
    weekdayAvailability: z.boolean().default(true),
    weekendAvailability: z.boolean().default(false),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  })

type VaccinatorFormValues = z.infer<typeof vaccinatorFormSchema>

// Define the vaccinator table structure - updated for new schema
interface StaffMember {
  id?: string // For frontend compatibility
  vaccinator_id: string // Primary key in the database
  auth_id?: string
  first_name: string
  last_name: string
  email: string
  phone: string
  department: string
  professional_id: string
  status: string
  weekday_availability: boolean
  weekend_availability: boolean
  profile_image_url?: string
  created_at: string
  updated_at: string
}

export default function VaccinatorManagement() {
  const [searchQuery, setSearchQuery] = useState("")
  const [showAddForm, setShowAddForm] = useState(false)
  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const { toast } = useToast()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [vaccinators, setVaccinators] = useState<StaffMember[]>([])
  const [error, setError] = useState<string | null>(null)

  // Initialize the form with React Hook Form
  const form = useForm<VaccinatorFormValues>({
    resolver: zodResolver(vaccinatorFormSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      departmentId: "",
      professionalId: "",
      status: "active", // Using lowercase to match the database constraint
      weekdayAvailability: true,
      weekendAvailability: false,
      password: "",
      confirmPassword: "",
    },
  })

  // Fetch vaccinators from Supabase
  const fetchVaccinators = async () => {
    try {
      setIsLoading(true)
      setError(null)
      console.log("Fetching vaccinators...")

      // Use fetch API instead of direct Supabase client to avoid client-side RLS issues
      const response = await fetch("/api/staff/list")

      if (!response.ok) {
        const contentType = response.headers.get("content-type")
        if (contentType && contentType.includes("application/json")) {
          const errorData = await response.json()
          throw new Error(errorData.error || `Failed to fetch vaccinators (${response.status})`)
        } else {
          throw new Error(`Failed to fetch vaccinators (${response.status})`)
        }
      }

      const result = await response.json()
      console.log("Fetched vaccinators:", result.data)

      if (result.data) {
        setVaccinators(result.data)
      }
    } catch (error: any) {
      console.error("Error fetching vaccinators:", error)
      setError(error.message || "Failed to load vaccinators")
      toast({
        title: "Error",
        description: error.message || "Failed to load vaccinators. Please refresh the page.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchVaccinators()
  }, [])

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]

      // Create preview
      const reader = new FileReader()
      reader.onload = (event) => {
        if (event.target && event.target.result) {
          setImagePreview(event.target.result as string)
        }
      }
      reader.readAsDataURL(file)
    }
  }

  const clearImage = () => {
    setImagePreview(null)
  }

  const closeForm = () => {
    setShowAddForm(false)
    form.reset()
    setImagePreview(null)
  }

  // Filter vaccinators based on search query
  const filteredVaccinators = vaccinators.filter(
    (vaccinator) =>
      `${vaccinator.first_name} ${vaccinator.last_name}`.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vaccinator.department.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vaccinator.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vaccinator.phone.toLowerCase().includes(searchQuery.toLowerCase()),
  )

  // Handle form submission
  async function onSubmit(values: VaccinatorFormValues) {
    setIsSubmitting(true)
    try {
      // Prepare data for API without complex destructuring
      const staffData = {
        first_name: values.firstName,
        last_name: values.lastName,
        email: values.email,
        phone: values.phone,
        department: values.departmentId,
        professional_id: values.professionalId,
        status: values.status,
        weekday_availability: values.weekdayAvailability,
        weekend_availability: values.weekendAvailability,
        profile_image_url: imagePreview || null,
        password: values.password, // Include password for auth user creation
      }

      // Use the server API route instead of direct Supabase client
      const response = await fetch("/api/staff", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(staffData),
      })

      if (!response.ok) {
        const contentType = response.headers.get("content-type")
        if (contentType && contentType.includes("application/json")) {
          const errorData = await response.json()
          throw new Error(errorData.error || `Failed to add vaccinator (${response.status})`)
        } else {
          throw new Error(`Failed to add vaccinator (${response.status})`)
        }
      }

      const result = await response.json()

      toast({
        title: "Vaccinator added successfully",
        description: `${values.firstName} ${values.lastName} has been added to the system.`,
      })

      // Create a new vaccinator object without complex spread operators
      const newVaccinator: StaffMember = {
        vaccinator_id: result.data.vaccinator_id,
        id: result.data.vaccinator_id, // For frontend compatibility
        auth_id: result.data.auth_id || undefined,
        first_name: values.firstName,
        last_name: values.lastName,
        email: values.email,
        phone: values.phone,
        department: values.departmentId,
        professional_id: values.professionalId,
        status: values.status,
        weekday_availability: values.weekdayAvailability,
        weekend_availability: values.weekendAvailability,
        profile_image_url: imagePreview || undefined,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      }

      // Update the state with the new vaccinator using concat instead of spread
      setVaccinators((prevVaccinators) => [newVaccinator].concat(prevVaccinators))

      // Close the form
      closeForm()
    } catch (error: any) {
      console.error("Error adding vaccinator:", error)

      // Handle different types of errors
      let errorMessage = "Failed to add vaccinator. Please try again."

      if (error.message) {
        // If it's a standard Error object, use its message
        errorMessage = `Error: ${error.message}`

        // You could also handle specific error types
        if (error.message.includes("duplicate")) {
          errorMessage = "A vaccinator with this email already exists."
          form.setError("email", {
            type: "server",
            message: "This email is already registered in the system.",
          })
        } else if (error.message.includes("foreign key")) {
          errorMessage = "Invalid department selected."
          form.setError("departmentId", {
            type: "server",
            message: "Please select a valid department.",
          })
        }
      }

      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  // Helper function to format availability for display
  const formatAvailability = (weekdays: boolean, weekends: boolean) => {
    if (weekdays && weekends) return "Weekdays, Weekends"
    if (weekdays) return "Weekdays"
    if (weekends) return "Weekends"
    return "Not available"
  }

  // Helper function to get badge variant based on status
  const getStatusBadgeVariant = (status: string) => {
    switch (status.toLowerCase()) {
      case "active":
        return "default"
      case "inactive":
        return "secondary"
      case "suspended":
        return "destructive"
      default:
        return "outline"
    }
  }

  // Helper function to format status for display (capitalize first letter)
  const formatStatus = (status: string) => {
    return status.charAt(0).toUpperCase() + status.slice(1)
  }

  // Render empty state when there's an error
  const renderEmptyState = () => {
    if (error) {
      return (
        <div className="flex flex-col items-center justify-center p-8 text-center">
          <div className="text-red-500 mb-2">Error loading vaccinators</div>
          <p className="text-gray-500 mb-4">{error}</p>
        </div>
      )
    }

    return (
      <div className="flex flex-col items-center justify-center p-8 text-center">
        <p className="text-gray-500 mb-4">No vaccinators found</p>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Link href="/admin/dashboard">
            <Button variant="ghost" size="icon">
              <ChevronLeft className="h-4 w-4" />
            </Button>
          </Link>
          <h2 className="text-2xl font-bold tracking-tight">Vaccinator Management</h2>
        </div>
      </div>

      <div className="flex items-center space-x-2">
        <Search className="h-4 w-4 text-gray-400" />
        <Input
          type="search"
          placeholder="Search vaccinators..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full max-w-sm"
        />
      </div>

      <div className="rounded-md border shadow-sm">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Department</TableHead>
              <TableHead>Contact</TableHead>
              <TableHead>Availability</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {isLoading ? (
              // Skeleton loading state
              Array(5)
                .fill(0)
                .map((_, index) => (
                  <TableRow key={`skeleton-${index}`}>
                    <TableCell>
                      <div className="flex items-center space-x-2">
                        <Skeleton className="h-10 w-10 rounded-full" />
                        <Skeleton className="h-4 w-[150px]" />
                      </div>
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[100px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[120px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[80px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-6 w-[70px] rounded-full" />
                    </TableCell>
                    <TableCell>
                      <div className="flex space-x-2">
                        <Skeleton className="h-9 w-16" />
                        <Skeleton className="h-9 w-16" />
                      </div>
                    </TableCell>
                  </TableRow>
                ))
            ) : filteredVaccinators.length > 0 ? (
              filteredVaccinators.map((vaccinator) => (
                <TableRow key={vaccinator.vaccinator_id || vaccinator.id}>
                  <TableCell>
                    <div className="font-medium">{`${vaccinator.first_name} ${vaccinator.last_name}`}</div>
                  </TableCell>
                  <TableCell>{vaccinator.department}</TableCell>
                  <TableCell>
                    <div className="flex flex-col">
                      <span>{vaccinator.email}</span>
                      <span className="text-sm text-gray-500">{vaccinator.phone}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    {formatAvailability(vaccinator.weekday_availability, vaccinator.weekend_availability)}
                  </TableCell>
                  <TableCell>
                    <Badge variant={getStatusBadgeVariant(vaccinator.status)}>{formatStatus(vaccinator.status)}</Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex space-x-2">
                      <Button variant="outline" size="sm">
                        Edit
                      </Button>
                      <Button variant="outline" size="sm" className="text-red-500 hover:text-red-600">
                        Delete
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={6} className="text-center py-4">
                  {renderEmptyState()}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      <div className="flex items-center justify-between">
        <p className="text-sm text-gray-500">
          Showing {filteredVaccinators.length} of {vaccinators.length} vaccinators
        </p>
        <div className="space-x-2">
          <Button variant="outline" size="sm" disabled>
            Previous
          </Button>
          <Button variant="outline" size="sm" disabled>
            Next
          </Button>
        </div>
      </div>

      {/* Floating Action Button */}
      <Button
        className="h-14 w-14 rounded-full fixed bottom-8 right-8 shadow-lg flex items-center justify-center"
        size="icon"
        onClick={() => setShowAddForm(true)}
      >
        <Plus className="h-6 w-6" />
      </Button>

      {/* Add Vaccinator Dialog */}
      <Dialog open={showAddForm} onOpenChange={setShowAddForm}>
        <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Add New Vaccinator</DialogTitle>
            <DialogDescription>Enter the details for the new vaccinator to create their account.</DialogDescription>
          </DialogHeader>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Profile Image */}
              <FormSection title="Profile Image">
                <div className="flex items-center gap-4">
                  <div className="border-2 border-dashed rounded-md border-gray-300 w-32 h-32 flex flex-col items-center justify-center relative">
                    {imagePreview ? (
                      <>
                        <img
                          src={imagePreview || "/placeholder.svg"}
                          alt="Profile preview"
                          className="w-full h-full object-cover rounded-md"
                        />
                        <button
                          type="button"
                          onClick={clearImage}
                          className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </>
                    ) : (
                      <>
                        <Upload className="h-8 w-8 text-gray-400" />
                        <p className="text-xs text-center text-gray-500 mt-2">
                          Drag your image here
                          <br />
                          (jpg and png accepted)
                        </p>
                      </>
                    )}
                  </div>
                  <div>
                    <Input
                      id="profileImage"
                      type="file"
                      accept="image/jpeg,image/png"
                      className="hidden"
                      onChange={handleImageChange}
                      disabled={isSubmitting}
                    />
                    <Label htmlFor="profileImage" asChild>
                      <Button type="button" variant="outline" className="cursor-pointer" disabled={isSubmitting}>
                        Browse...
                      </Button>
                    </Label>
                  </div>
                </div>
              </FormSection>

              {/* Basic Information */}
              <FormSection title="Basic Information">
                <div className="grid gap-4 md:grid-cols-2">
                  <FormField
                    control={form.control}
                    name="firstName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>First Name</FormLabel>
                        <FormControl>
                          <Input placeholder="John" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="lastName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Last Name</FormLabel>
                        <FormControl>
                          <Input placeholder="Doe" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="departmentId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Department</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select department" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="pediatric">Pediatric</SelectItem>
                            <SelectItem value="general">General</SelectItem>
                            <SelectItem value="infectious">Infectious Disease</SelectItem>
                            <SelectItem value="immunology">Immunology</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="status"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Status</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="active">Active</SelectItem>
                            <SelectItem value="inactive">Inactive</SelectItem>
                            <SelectItem value="suspended">Suspended</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <FormField
                  control={form.control}
                  name="professionalId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Professional ID/License</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., MD12345" disabled={isSubmitting} {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </FormSection>

              {/* Contact Information */}
              <FormSection title="Contact Information">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Email</FormLabel>
                        <FormControl>
                          <Input
                            type="email"
                            placeholder="doctor@lavihospital.com"
                            disabled={isSubmitting}
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="phone"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Phone Number</FormLabel>
                        <FormControl>
                          <Input type="tel" placeholder="+1 (555) 123-4567" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </FormSection>

              {/* Availability */}
              <FormSection title="Availability" description="Select when the vaccinator is available">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="weekdayAvailability"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-start space-x-2 space-y-0">
                        <FormControl>
                          <Checkbox checked={field.value} onCheckedChange={field.onChange} disabled={isSubmitting} />
                        </FormControl>
                        <div className="space-y-1 leading-none">
                          <FormLabel>Weekdays (Monday-Friday)</FormLabel>
                        </div>
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="weekendAvailability"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-start space-x-2 space-y-0">
                        <FormControl>
                          <Checkbox checked={field.value} onCheckedChange={field.onChange} disabled={isSubmitting} />
                        </FormControl>
                        <div className="space-y-1 leading-none">
                          <FormLabel>Weekends (Saturday-Sunday)</FormLabel>
                        </div>
                      </FormItem>
                    )}
                  />
                </div>
              </FormSection>

              {/* Security */}
              <FormSection title="Account Security">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="password"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Password</FormLabel>
                        <FormControl>
                          <Input type="password" placeholder="••••••••" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormDescription>
                          Must be at least 8 characters long, contain one uppercase letter, one number, and one special
                          character
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="confirmPassword"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Confirm Password</FormLabel>
                        <FormControl>
                          <Input type="password" placeholder="••••••••" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </FormSection>

              <DialogFooter>
                <Button type="button" variant="outline" onClick={closeForm} disabled={isSubmitting}>
                  Cancel
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Adding Vaccinator...
                    </>
                  ) : (
                    "Add Vaccinator"
                  )}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  )
}
