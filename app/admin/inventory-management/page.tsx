"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ChevronLeft, Search, Plus, Filter, Download } from "lucide-react"
import Link from "next/link"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from "@/components/ui/form"
import { FormSection } from "@/components/forms/FormSection"
import { useToast } from "@/components/ui/use-toast"
import { Textarea } from "@/components/ui/textarea"
import { Skeleton } from "@/components/ui/skeleton"
import { useEffect } from "react"

// Define the inventory form schema with Zod
const inventoryFormSchema = z.object({
  // Primary key
  id: z.string().uuid().optional(), // Auto-generated by Supabase

  // Basic vaccine information
  name: z.string().min(1, "Vaccine name is required"),
  vaccineTypeId: z.string().min(1, "Please select a valid vaccine type"), // Foreign key to vaccine_types table
  manufacturerId: z.string().min(1, "Please select a valid manufacturer"), // Foreign key to manufacturers table

  // Batch information
  batchNumber: z.string().min(1, "Batch/Lot number is required"),
  expiryDate: z
    .string()
    .min(1, "Expiry date is required")
    .refine((date) => new Date(date) > new Date(), {
      message: "Expiry date must be in the future",
    }),

  // Stock information
  currentStock: z.coerce.number().min(0, "Current stock cannot be negative").default(0),
  initialStock: z.coerce.number().min(1, "Initial stock must be at least 1"),
  minStockLevel: z.coerce.number().min(0, "Minimum stock level cannot be negative"),

  // Storage information
  storageConditions: z.string().min(1, "Storage conditions are required"),
  storageLocationId: z.string().min(1, "Please select a valid storage location"), // Foreign key to storage_locations table

  // Supplier information (foreign key instead of nested object)
  supplierId: z.string().min(1, "Please select a valid supplier"), // Foreign key to suppliers table

  // Additional information
  notes: z.string().optional(),

  // System fields
  status: z.enum(["available", "low_stock", "out_of_stock", "expired"]).default("available").optional(),
})

type InventoryFormValues = z.infer<typeof inventoryFormSchema>

export default function InventoryManagement() {
  const [searchQuery, setSearchQuery] = useState("")
  const [filterStatus, setFilterStatus] = useState("all")
  const [dialogOpen, setDialogOpen] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const { toast } = useToast()
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // Simulate data fetching
    const fetchInventory = async () => {
      try {
        // This will be replaced with actual Supabase query
        // const { data, error } = await supabase.from('inventory').select('*');
        // if (error) throw error;

        // Simulate API delay
        await new Promise((resolve) => setTimeout(resolve, 1500))

        // setInventoryItems(data); // You would set your data here
      } catch (error) {
        console.error("Error fetching inventory:", error)
        toast({
          title: "Error",
          description: "Failed to load inventory data. Please refresh the page.",
          variant: "destructive",
        })
      } finally {
        setIsLoading(false)
      }
    }

    fetchInventory()
  }, [])

  // Initialize the form with React Hook Form
  const form = useForm<InventoryFormValues>({
    resolver: zodResolver(inventoryFormSchema),
    defaultValues: {
      name: "",
      vaccineTypeId: "",
      manufacturerId: "",
      batchNumber: "",
      expiryDate: "",
      currentStock: 0,
      initialStock: 0,
      minStockLevel: 0,
      storageConditions: "",
      storageLocationId: "",
      supplierId: "",
      notes: "",
      status: "available",
    },
  })

  // Handle form submission
  async function onSubmit(values: InventoryFormValues) {
    setIsSubmitting(true)
    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000))

      console.log("Inventory form submitted:", values)
      // This will be replaced with actual API call to Supabase
      // Example Supabase integration:
      // const { data, error } = await supabase
      //   .from('inventory')
      //   .insert([{
      //     name: values.name,
      //     vaccine_type_id: values.vaccineTypeId,
      //     manufacturer_id: values.manufacturerId,
      //     batch_number: values.batchNumber,
      //     expiry_date: values.expiryDate,
      //     current_stock: values.currentStock,
      //     initial_stock: values.initialStock,
      //     min_stock_level: values.minStockLevel,
      //     storage_conditions: values.storageConditions,
      //     storage_location_id: values.storageLocationId,
      //     supplier_id: values.supplierId,
      //     notes: values.notes,
      //     status: values.status
      //   }]);

      // if (error) {
      //   throw new Error(`Database error: ${error.message}`);
      // }

      toast({
        title: "Vaccine added successfully",
        description: `${values.name} has been added to the inventory.`,
      })

      setDialogOpen(false)
      form.reset()
    } catch (error) {
      console.error("Error adding vaccine to inventory:", error)

      // Handle different types of errors
      let errorMessage = "Failed to add vaccine to inventory. Please try again."

      if (error instanceof Error) {
        // If it's a standard Error object, use its message
        errorMessage = `Error: ${error.message}`

        // You could also handle specific error types
        if (error.message.includes("duplicate")) {
          errorMessage = "A vaccine with this batch number already exists."
          form.setError("batchNumber", {
            type: "server",
            message: "This batch number is already registered in the system.",
          })
        } else if (error.message.includes("foreign key")) {
          errorMessage = "One or more selected references are invalid."
        }
      }

      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Link href="/admin/dashboard">
            <Button variant="ghost" size="icon">
              <ChevronLeft className="h-4 w-4" />
            </Button>
          </Link>
          <h2 className="text-2xl font-bold tracking-tight">Inventory Management</h2>
        </div>
      </div>

      <div className="flex flex-wrap items-center gap-4">
        <Button variant="outline">
          <Download className="mr-2 h-4 w-4" /> Export
        </Button>

        <Select onValueChange={setFilterStatus} defaultValue={filterStatus}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filter by status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Statuses</SelectItem>
            <SelectItem value="normal">Normal</SelectItem>
            <SelectItem value="warning">Warning</SelectItem>
            <SelectItem value="critical">Critical</SelectItem>
          </SelectContent>
        </Select>

        <Button variant="outline" size="icon">
          <Filter className="h-4 w-4" />
        </Button>

        <div className="flex items-center gap-2 flex-1 md:max-w-sm ml-auto">
          <Search className="h-4 w-4 text-gray-400" />
          <Input
            type="search"
            placeholder="Search vaccines..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </div>
      </div>

      <div className="rounded-md border shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Batch/Lot Number</TableHead>
              <TableHead>Current Stock</TableHead>
              <TableHead>Expiry Date</TableHead>
              <TableHead>Last Restocked</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {isLoading ? (
              // Skeleton loading state
              Array(5)
                .fill(0)
                .map((_, index) => (
                  <TableRow key={`skeleton-${index}`}>
                    <TableCell>
                      <Skeleton className="h-4 w-[150px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[100px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[60px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[100px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[100px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-6 w-[70px] rounded-full" />
                    </TableCell>
                    <TableCell>
                      <div className="flex space-x-2">
                        <Skeleton className="h-9 w-16" />
                        <Skeleton className="h-9 w-16" />
                      </div>
                    </TableCell>
                  </TableRow>
                ))
            ) : (
              <TableRow>
                <TableCell colSpan={7} className="text-center py-4">
                  No vaccines found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Stock Levels</CardTitle>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="space-y-4">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-3/4" />
              <Skeleton className="h-[150px] w-full" />
            </div>
          ) : (
            <p>No stock data available</p>
          )}
        </CardContent>
      </Card>

      {/* Floating Action Button */}
      <Button
        className="h-14 w-14 rounded-full fixed bottom-8 right-8 shadow-lg flex items-center justify-center"
        size="icon"
        onClick={() => setDialogOpen(true)}
      >
        <Plus className="h-6 w-6" />
      </Button>

      {/* Add New Vaccine Dialog */}
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Add New Vaccine</DialogTitle>
            <DialogDescription>Enter the details for the new vaccine to add to inventory.</DialogDescription>
          </DialogHeader>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormSection title="Vaccine Information">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Vaccine Name</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., COVID-19 Vaccine" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="vaccineTypeId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Vaccine Type</FormLabel>
                        <FormControl>
                          <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                            <SelectTrigger>
                              <SelectValue placeholder="Select vaccine type" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="covid19">COVID-19</SelectItem>
                              <SelectItem value="flu">Influenza</SelectItem>
                              <SelectItem value="tdap">Tdap</SelectItem>
                              <SelectItem value="mmr">MMR</SelectItem>
                              <SelectItem value="hpv">HPV</SelectItem>
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="manufacturerId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Manufacturer</FormLabel>
                        <FormControl>
                          <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                            <SelectTrigger>
                              <SelectValue placeholder="Select manufacturer" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="pfizer">Pfizer</SelectItem>
                              <SelectItem value="moderna">Moderna</SelectItem>
                              <SelectItem value="jnj">Johnson & Johnson</SelectItem>
                              <SelectItem value="astrazeneca">AstraZeneca</SelectItem>
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="batchNumber"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Batch/Lot Number</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., BX2021-05A" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="expiryDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Expiry Date</FormLabel>
                        <FormControl>
                          <Input type="date" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </FormSection>

              <FormSection title="Stock Information">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="initialStock"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Initial Stock</FormLabel>
                        <FormControl>
                          <Input type="number" placeholder="0" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="currentStock"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Current Stock</FormLabel>
                        <FormControl>
                          <Input type="number" placeholder="0" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="minStockLevel"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Minimum Stock Level</FormLabel>
                        <FormControl>
                          <Input type="number" placeholder="0" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormDescription>System will alert when stock falls below this level</FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </FormSection>

              <FormSection title="Storage Information">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="storageConditions"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Storage Conditions</FormLabel>
                        <FormControl>
                          <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                            <SelectTrigger>
                              <SelectValue placeholder="Select storage conditions" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="room">Room Temperature (15-25°C)</SelectItem>
                              <SelectItem value="refrigerated">Refrigerated (2-8°C)</SelectItem>
                              <SelectItem value="frozen">Frozen (-15 to -25°C)</SelectItem>
                              <SelectItem value="ultracold">Ultra-Cold (-60 to -80°C)</SelectItem>
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="storageLocationId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Storage Location</FormLabel>
                        <FormControl>
                          <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                            <SelectTrigger>
                              <SelectValue placeholder="Select storage location" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="fridge1">Refrigerator 1</SelectItem>
                              <SelectItem value="fridge2">Refrigerator 2</SelectItem>
                              <SelectItem value="freezer1">Freezer 1</SelectItem>
                              <SelectItem value="room1">Room Temperature Cabinet 1</SelectItem>
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </FormSection>

              <FormSection title="Supplier Information">
                <FormField
                  control={form.control}
                  name="supplierId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Supplier</FormLabel>
                      <FormControl>
                        <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                          <SelectTrigger>
                            <SelectValue placeholder="Select supplier" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="supplier1">Medical Supplies Inc.</SelectItem>
                            <SelectItem value="supplier2">Vaccine Distributors Ltd.</SelectItem>
                            <SelectItem value="supplier3">Healthcare Products Co.</SelectItem>
                          </SelectContent>
                        </Select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </FormSection>

              <FormSection title="Additional Information">
                <FormField
                  control={form.control}
                  name="notes"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Notes</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Any additional information about this vaccine"
                          className="min-h-[100px]"
                          disabled={isSubmitting}
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </FormSection>

              <DialogFooter>
                <Button type="button" variant="outline" onClick={() => setDialogOpen(false)} disabled={isSubmitting}>
                  Cancel
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Adding Vaccine...
                    </>
                  ) : (
                    "Add Vaccine"
                  )}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  )
}
