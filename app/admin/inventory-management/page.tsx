"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ChevronLeft, Search, Plus, Filter, Download } from "lucide-react"
import Link from "next/link"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form"
import { FormSection } from "@/components/forms/FormSection"
import { useToast } from "@/components/ui/use-toast"
import { Skeleton } from "@/components/ui/skeleton"
import { Badge } from "@/components/ui/badge"

// Update the inventory form schema to match the Supabase table structure
const inventoryFormSchema = z.object({
  // Primary key
  id: z.string().uuid().optional(), // Auto-generated by Supabase

  // Basic vaccine information
  vaccine_name: z.string().min(1, "Vaccine name is required"),
  manufacturer: z.string().min(1, "Manufacturer is required"),

  // Batch information
  batch_number: z.string().min(1, "Batch/Lot number is required"),
  expiration_date: z
    .string()
    .min(1, "Expiry date is required")
    .refine((date) => new Date(date) > new Date(), {
      message: "Expiry date must be in the future",
    }),

  // Stock information
  total_doses: z.coerce.number().min(0, "Total doses cannot be negative").default(0),
  available_doses: z.coerce.number().min(0, "Available doses cannot be negative").default(0),

  // Storage information
  storage_location: z.string().min(1, "Storage location is required"),
  storage_requirements: z
    .object({
      temperature: z.string().optional(),
      light: z.string().optional(),
      humidity: z.string().optional(),
    })
    .optional(),

  // Status field
  status: z.enum(["available", "low_stock", "out_of_stock", "expired"]).default("available"),
})

type InventoryFormValues = z.infer<typeof inventoryFormSchema>

// Define the vaccine inventory structure
interface VaccineInventory {
  id: string
  vaccine_name: string
  manufacturer: string
  batch_number: string
  expiration_date: string
  total_doses: number
  available_doses: number
  storage_location: string
  storage_requirements?: {
    temperature?: string
    light?: string
    humidity?: string
  }
  status: string
  created_at: string
  updated_at: string
}

export default function InventoryManagement() {
  const [searchQuery, setSearchQuery] = useState("")
  const [filterStatus, setFilterStatus] = useState("all")
  const [dialogOpen, setDialogOpen] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [vaccines, setVaccines] = useState<VaccineInventory[]>([])
  const { toast } = useToast()

  // Update the form initialization to match the new schema
  const form = useForm<InventoryFormValues>({
    resolver: zodResolver(inventoryFormSchema),
    defaultValues: {
      vaccine_name: "",
      manufacturer: "",
      batch_number: "",
      expiration_date: "",
      total_doses: 0,
      available_doses: 0,
      storage_location: "",
      storage_requirements: {
        temperature: "",
        light: "",
        humidity: "",
      },
      status: "available",
    },
  })

  // Fetch vaccines from the API
  const fetchVaccines = async () => {
    try {
      setIsLoading(true)
      console.log("Fetching vaccines...")

      const response = await fetch("/api/inventory")

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || "Failed to fetch vaccines")
      }

      const result = await response.json()
      console.log("Fetched vaccines:", result.data)

      setVaccines(result.data || [])
    } catch (error: any) {
      console.error("Error fetching vaccines:", error)
      toast({
        title: "Error",
        description: "Failed to load vaccine inventory. Please refresh the page.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchVaccines()
  }, [])

  // Filter vaccines based on search query and status
  const filteredVaccines = vaccines.filter((vaccine) => {
    const matchesSearch =
      vaccine.vaccine_name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vaccine.manufacturer.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vaccine.batch_number.toLowerCase().includes(searchQuery.toLowerCase())

    const matchesStatus = filterStatus === "all" || vaccine.status === filterStatus

    return matchesSearch && matchesStatus
  })

  // Update the onSubmit function to match the new schema
  async function onSubmit(values: InventoryFormValues) {
    setIsSubmitting(true)
    try {
      // Prepare data for API without complex destructuring
      const vaccineData = {
        vaccine_name: values.vaccine_name,
        manufacturer: values.manufacturer,
        batch_number: values.batch_number,
        expiration_date: values.expiration_date,
        total_doses: values.total_doses,
        available_doses: values.available_doses,
        storage_location: values.storage_location,
        storage_requirements: values.storage_requirements,
        status: values.status,
      }

      const response = await fetch("/api/inventory", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(vaccineData),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || "Failed to add vaccine")
      }

      const result = await response.json()

      toast({
        title: "Vaccine added successfully",
        description: `${values.vaccine_name} has been added to the inventory.`,
      })

      // Create a new vaccine object without complex spread operators
      const newVaccine: VaccineInventory = {
        id: result.data.id,
        vaccine_name: values.vaccine_name,
        manufacturer: values.manufacturer,
        batch_number: values.batch_number,
        expiration_date: values.expiration_date,
        total_doses: values.total_doses,
        available_doses: values.available_doses,
        storage_location: values.storage_location,
        storage_requirements: values.storage_requirements,
        status: values.status,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      }

      // Update the state with the new vaccine using concat instead of spread
      setVaccines((prevVaccines) => [newVaccine].concat(prevVaccines))

      setDialogOpen(false)
      form.reset()
    } catch (error: any) {
      console.error("Error adding vaccine to inventory:", error)

      // Handle different types of errors
      let errorMessage = "Failed to add vaccine to inventory. Please try again."

      if (error.message) {
        errorMessage = `Error: ${error.message}`

        if (error.message.includes("duplicate")) {
          errorMessage = "A vaccine with this batch number already exists."
          form.setError("batch_number", {
            type: "server",
            message: "This batch number is already registered in the system.",
          })
        }
      }

      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  // Helper function to get badge variant based on status
  const getStatusBadgeVariant = (status: string) => {
    switch (status.toLowerCase()) {
      case "available":
        return "default"
      case "low_stock":
        return "secondary"
      case "out_of_stock":
        return "destructive"
      case "expired":
        return "outline"
      default:
        return "outline"
    }
  }

  // Helper function to format status for display
  const formatStatus = (status: string) => {
    return status
      .split("_")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" ")
  }

  // Helper function to format date
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString()
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Link href="/admin/dashboard">
            <Button variant="ghost" size="icon">
              <ChevronLeft className="h-4 w-4" />
            </Button>
          </Link>
          <h2 className="text-2xl font-bold tracking-tight">Inventory Management</h2>
        </div>
      </div>

      <div className="flex flex-wrap items-center gap-4">
        <Button variant="outline">
          <Download className="mr-2 h-4 w-4" /> Export
        </Button>

        <Select onValueChange={setFilterStatus} defaultValue={filterStatus}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filter by status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Statuses</SelectItem>
            <SelectItem value="available">Available</SelectItem>
            <SelectItem value="low_stock">Low Stock</SelectItem>
            <SelectItem value="out_of_stock">Out of Stock</SelectItem>
            <SelectItem value="expired">Expired</SelectItem>
          </SelectContent>
        </Select>

        <Button variant="outline" size="icon">
          <Filter className="h-4 w-4" />
        </Button>

        <div className="flex items-center gap-2 flex-1 md:max-w-sm ml-auto">
          <Search className="h-4 w-4 text-gray-400" />
          <Input
            type="search"
            placeholder="Search vaccines..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full"
          />
        </div>
      </div>

      <div className="rounded-md border shadow-sm overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Vaccine Name</TableHead>
              <TableHead>Manufacturer</TableHead>
              <TableHead>Batch Number</TableHead>
              <TableHead>Available Doses</TableHead>
              <TableHead>Expiry Date</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {isLoading ? (
              // Skeleton loading state
              Array(5)
                .fill(0)
                .map((_, index) => (
                  <TableRow key={`skeleton-${index}`}>
                    <TableCell>
                      <Skeleton className="h-4 w-[150px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[100px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[100px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[60px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-4 w-[100px]" />
                    </TableCell>
                    <TableCell>
                      <Skeleton className="h-6 w-[70px] rounded-full" />
                    </TableCell>
                    <TableCell>
                      <div className="flex space-x-2">
                        <Skeleton className="h-9 w-16" />
                        <Skeleton className="h-9 w-16" />
                      </div>
                    </TableCell>
                  </TableRow>
                ))
            ) : filteredVaccines.length > 0 ? (
              filteredVaccines.map((vaccine) => (
                <TableRow key={vaccine.id}>
                  <TableCell>
                    <div className="font-medium">{vaccine.vaccine_name}</div>
                  </TableCell>
                  <TableCell>{vaccine.manufacturer}</TableCell>
                  <TableCell>{vaccine.batch_number}</TableCell>
                  <TableCell>{vaccine.available_doses}</TableCell>
                  <TableCell>{formatDate(vaccine.expiration_date)}</TableCell>
                  <TableCell>
                    <Badge variant={getStatusBadgeVariant(vaccine.status)}>{formatStatus(vaccine.status)}</Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex space-x-2">
                      <Button variant="outline" size="sm">
                        Edit
                      </Button>
                      <Button variant="outline" size="sm" className="text-red-500 hover:text-red-600">
                        Delete
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={7} className="text-center py-4">
                  No vaccines found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      <div className="flex items-center justify-between">
        <p className="text-sm text-gray-500">
          Showing {filteredVaccines.length} of {vaccines.length} vaccines
        </p>
        <div className="space-x-2">
          <Button variant="outline" size="sm" disabled>
            Previous
          </Button>
          <Button variant="outline" size="sm" disabled>
            Next
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Stock Levels Summary</CardTitle>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="space-y-4">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-3/4" />
            </div>
          ) : (
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                  {vaccines.filter((v) => v.status === "available").length}
                </div>
                <div className="text-sm text-gray-500">Available</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-600">
                  {vaccines.filter((v) => v.status === "low_stock").length}
                </div>
                <div className="text-sm text-gray-500">Low Stock</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-red-600">
                  {vaccines.filter((v) => v.status === "out_of_stock").length}
                </div>
                <div className="text-sm text-gray-500">Out of Stock</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-gray-600">
                  {vaccines.filter((v) => v.status === "expired").length}
                </div>
                <div className="text-sm text-gray-500">Expired</div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Floating Action Button */}
      <Button
        className="h-14 w-14 rounded-full fixed bottom-8 right-8 shadow-lg flex items-center justify-center"
        size="icon"
        onClick={() => setDialogOpen(true)}
      >
        <Plus className="h-6 w-6" />
      </Button>

      {/* Add New Vaccine Dialog */}
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Add New Vaccine</DialogTitle>
            <DialogDescription>Enter the details for the new vaccine to add to inventory.</DialogDescription>
          </DialogHeader>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormSection title="Vaccine Information">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="vaccine_name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Vaccine Name</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., COVID-19 Vaccine" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="manufacturer"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Manufacturer</FormLabel>
                        <FormControl>
                          <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                            <SelectTrigger>
                              <SelectValue placeholder="Select manufacturer" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="Pfizer">Pfizer</SelectItem>
                              <SelectItem value="Moderna">Moderna</SelectItem>
                              <SelectItem value="Johnson & Johnson">Johnson & Johnson</SelectItem>
                              <SelectItem value="AstraZeneca">AstraZeneca</SelectItem>
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="batch_number"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Batch/Lot Number</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., BX2021-05A" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="expiration_date"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Expiration Date</FormLabel>
                        <FormControl>
                          <Input type="date" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </FormSection>

              <FormSection title="Stock Information">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="total_doses"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Total Doses</FormLabel>
                        <FormControl>
                          <Input type="number" placeholder="0" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="available_doses"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Available Doses</FormLabel>
                        <FormControl>
                          <Input type="number" placeholder="0" disabled={isSubmitting} {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </FormSection>

              <FormSection title="Storage Information">
                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="storage_location"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Storage Location</FormLabel>
                        <FormControl>
                          <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                            <SelectTrigger>
                              <SelectValue placeholder="Select storage location" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="Refrigerator 1">Refrigerator 1</SelectItem>
                              <SelectItem value="Refrigerator 2">Refrigerator 2</SelectItem>
                              <SelectItem value="Freezer 1">Freezer 1</SelectItem>
                              <SelectItem value="Room Temperature Cabinet 1">Room Temperature Cabinet 1</SelectItem>
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="status"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Status</FormLabel>
                        <FormControl>
                          <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                            <SelectTrigger>
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="available">Available</SelectItem>
                              <SelectItem value="low_stock">Low Stock</SelectItem>
                              <SelectItem value="out_of_stock">Out of Stock</SelectItem>
                              <SelectItem value="expired">Expired</SelectItem>
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <FormField
                  control={form.control}
                  name="storage_requirements.temperature"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Temperature Requirements</FormLabel>
                      <FormControl>
                        <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>
                          <SelectTrigger>
                            <SelectValue placeholder="Select temperature requirements" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="room">Room Temperature (15-25°C)</SelectItem>
                            <SelectItem value="refrigerated">Refrigerated (2-8°C)</SelectItem>
                            <SelectItem value="frozen">Frozen (-15 to -25°C)</SelectItem>
                            <SelectItem value="ultracold">Ultra-Cold (-60 to -80°C)</SelectItem>
                          </SelectContent>
                        </Select>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </FormSection>

              <DialogFooter>
                <Button type="button" variant="outline" onClick={() => setDialogOpen(false)} disabled={isSubmitting}>
                  Cancel
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Adding Vaccine...
                    </>
                  ) : (
                    "Add Vaccine"
                  )}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </div>
  )
}
